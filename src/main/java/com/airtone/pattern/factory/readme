工厂模式的由来：
1、原始社会自给自足---需要啥就直接new对象，没有工厂
2、农耕社会小作坊---简单工厂模式，民间酒坊，根据产品名字统一在一个地方给制造，不需要依赖该产品类
3、工厂流水线生产---工厂方法模式，自产自销
4、现代产业链代工厂---抽象工厂模式，富士康

以GP的课程为例，开设有java架构、python课程、大数据、人工智能等课程。

一、简单工厂
适用场景：
1、工厂类负责创建的对象较少
2、客户端只需要传入工厂类的参数，对于如何创建对象的逻辑不需要关系

优点：
只需要传入一个正确的参数，就可以获取到你所需要的对象，无需知道其创建的细节。

缺点：
工厂类的职责相对过重，增加新的产品时需要修改工厂类的判断逻辑，违背开闭原则
不易于扩展复杂的产品结构


二、工厂方法模式
工厂方法模式（Fatory Method Pattern）是指定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行。
属于创建型设计模式。

适用场景：
创建对象需要大量重复的代码。
客户端（应用层）不依赖于产品类实例如何被创建、实现等细节。一个类通过其子类来指定创建哪个对象。

优点：
用户只需关心所需产品对应的工厂，无须关心创建细节。
加入新产品符合开闭原则，提高了系统的可扩展性。

缺点：
类的个数容易过多，增加了代码结构的复杂度。
增加了系统的抽象性和理解难度。


三、抽象工厂模式
抽象工厂模式（Abastract Factory Pattern）是指提供一个创建一系列相关或相互依赖对象的接口，无须指定他们具体的类。
属于创建型设计模式。

适用场景：
客户端（应用层）不依赖于产品类实例如何被创建、实现等细节。
强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量重复的代码。
提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。

优点：
具体产品在应用层代码隔离，无须关心创建细节
将一个系列的产品族统一到一起创建。

缺点：
规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口。
增加了系统的抽象性和理解难度。

抽象工厂是一个复合维度的概念，比如多个工厂每个工厂都制作几种不同类型的产品，产品等级结构和产品族的概念；





